name: Deploy to Staging

on:
  push:
    branches: [master]

env:
  GITHUB_SHA: ${{ github.sha }}
  BRANCH: ${{ github.ref }}

jobs:
  deploy: 
    strategy:
      matrix:
        name : [ retrieval, submission]
        include:
          - name: retrieval
            SERVICE_NAME: KeyRetrieval
            TASK_DEFINITION_FILE: task-defintion-retrieval.json
            LAMBDA: RetrievalValidateBeforeTraffic
            CONTAINER_NAME: key-retrieval
            APPSPEC_FILE: covidshield-retrieval.json
          - name: submission
            SERVICE_NAME: KeySubmission
            TASK_DEFINITION_FILE: task-defintion-submission.json
            LAMBDA: SubmissionValidateBeforeTraffic
            CONTAINER_NAME: key-submission
            APPSPEC_FILE: covidshield-submission.json
  
    if: github.ref == 'refs/heads/master' && github.event_name == 'push'
    runs-on: ubuntu-latest
    steps:
      - name: Wait for container to be built and pushed
        uses: fountainhead/action-wait-for-check@v1.0.0
        id: wait-for-build
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          checkName: build-n-push
          ref: ${{ github.sha }}

      - name: Checkout
        if: steps.wait-for-build.outputs.conclusion == 'success'
        uses: actions/checkout@v2

      - name: Configure AWS credentials
        if: steps.wait-for-build.outputs.conclusion == 'success'
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ca-central-1

      - name: Get Cluster Name
        if: steps.wait-for-build.outputs.conclusion == 'success'
        id: cluster
        run: |
          echo "##[set-output name=name;]$(aws ecs list-clusters | jq -r '.clusterArns[0]' | cut -f 2 -d "/" )"

      - name: Download task definition
        if: steps.wait-for-build.outputs.conclusion == 'success'
        id: download-taskdef
        run: |
          aws ecs describe-task-definition --task-definition ${{ matrix.SERVICE_NAME }} --query taskDefinition > ${{ matric.TASK_DEFINITION_FILE }}
          echo "##[set-output name=container_name;]$(jq -r '.containerDefinitions[0].name' ${{ matric.TASK_DEFINITION_FILE }}"

      - name: Render image for service
        if: steps.wait-for-build.outputs.conclusion == 'success'
        id: taskdef
        uses: aws-actions/amazon-ecs-render-task-definition@9666dc9
        with:
          task-definition: ${{ matrix.TASK_DEFINITION_FILE }}
          container-name: ${{ steps.download-taskdef.outputs.container_name }}
          image: ${{ steps.login-ecr.outputs.registry }}/covid-server/key-${{ matrix.name }}:${{ github.sha }}

      - name: Render appspec for service
        if: steps.wait-for-build.outputs.conclusion == 'success'
        run: |
          CONTAINER_PORT=`jq '.containerDefinitions[0].portMappings[0].containerPort' ${{ matrix.TASK_DEFINITION_FILE }}`
          CONTAINER_NAME=${{ steps.download-taskdef.outputs.container_name }}
          TASKDEF_ARN=`jq -r '.taskDefinitionArn' ${{ matrix.TASK_DEFINITION_FILE }} | cut -f 1-6 -d "/"`
          jq  --argjson port "$CONTAINER_PORT" --arg cname "$CONTAINER_NAME" --arg taskdefarn "$TASKDEF_ARN" --arg lambda "${{ matrix.LAMBDA }}" '.Resources[0].TargetService.Properties.TaskDefinition = $taskdefarn | .Resources[0].TargetService.Properties.LoadBalancerInfo.ContainerName = $cname | .Resources[0].TargetService.Properties.LoadBalancerInfo.ContainerPort = $port | .Hooks[0].BeforeAllowTraffic = $lambda ' config/infrastructure/aws/appspec-template.json > ${{ matrix.APPSPEC_FILE }}
      - name: Deploy image for submission service
        if: steps.wait-for-build.outputs.conclusion == 'success'
        timeout-minutes: 10
        # Version 1.3.5 of the action
        uses: aws-actions/amazon-ecs-deploy-task-definition@7218b9c4a02d0482834ead0388d3cdd982888461
        with:
          task-definition: ${{ steps.taskdef.outputs.task-definition }}
          service: ${{ matrix.SERVICE_NAME }}
          cluster: ${{ steps.cluster.outputs.name }}
          wait-for-service-stability: true
          codedeploy-appspec: ${{ github.workspace }}/${{ APPSPEC_FILE }}

      - name: Logout of Amazon ECR
        if: always()
        run: docker logout ${{ steps.login-ecr.outputs.registry }}
