// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.21.0-devel
// 	protoc        v3.11.4
// source: proto/covidshield.proto

package covidshield

import (
	proto "github.com/golang/protobuf/proto"
	duration "github.com/golang/protobuf/ptypes/duration"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type KeyClaimResponse_ErrorCode int32

const (
	KeyClaimResponse_NONE                  KeyClaimResponse_ErrorCode = 0
	KeyClaimResponse_UNKNOWN               KeyClaimResponse_ErrorCode = 1
	KeyClaimResponse_INVALID_ONE_TIME_CODE KeyClaimResponse_ErrorCode = 2
	KeyClaimResponse_SERVER_ERROR          KeyClaimResponse_ErrorCode = 3
	// Indicates the key is invalid, or already registered.
	KeyClaimResponse_INVALID_KEY   KeyClaimResponse_ErrorCode = 4
	KeyClaimResponse_TEMPORARY_BAN KeyClaimResponse_ErrorCode = 5
)

// Enum value maps for KeyClaimResponse_ErrorCode.
var (
	KeyClaimResponse_ErrorCode_name = map[int32]string{
		0: "NONE",
		1: "UNKNOWN",
		2: "INVALID_ONE_TIME_CODE",
		3: "SERVER_ERROR",
		4: "INVALID_KEY",
		5: "TEMPORARY_BAN",
	}
	KeyClaimResponse_ErrorCode_value = map[string]int32{
		"NONE":                  0,
		"UNKNOWN":               1,
		"INVALID_ONE_TIME_CODE": 2,
		"SERVER_ERROR":          3,
		"INVALID_KEY":           4,
		"TEMPORARY_BAN":         5,
	}
)

func (x KeyClaimResponse_ErrorCode) Enum() *KeyClaimResponse_ErrorCode {
	p := new(KeyClaimResponse_ErrorCode)
	*p = x
	return p
}

func (x KeyClaimResponse_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (KeyClaimResponse_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_covidshield_proto_enumTypes[0].Descriptor()
}

func (KeyClaimResponse_ErrorCode) Type() protoreflect.EnumType {
	return &file_proto_covidshield_proto_enumTypes[0]
}

func (x KeyClaimResponse_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *KeyClaimResponse_ErrorCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = KeyClaimResponse_ErrorCode(num)
	return nil
}

// Deprecated: Use KeyClaimResponse_ErrorCode.Descriptor instead.
func (KeyClaimResponse_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_covidshield_proto_rawDescGZIP(), []int{1, 0}
}

type EncryptedUploadResponse_ErrorCode int32

const (
	EncryptedUploadResponse_NONE                      EncryptedUploadResponse_ErrorCode = 0
	EncryptedUploadResponse_UNKNOWN                   EncryptedUploadResponse_ErrorCode = 1
	EncryptedUploadResponse_INVALID_KEYPAIR           EncryptedUploadResponse_ErrorCode = 2
	EncryptedUploadResponse_DECRYPTION_FAILED         EncryptedUploadResponse_ErrorCode = 3
	EncryptedUploadResponse_INVALID_PAYLOAD           EncryptedUploadResponse_ErrorCode = 4
	EncryptedUploadResponse_SERVER_ERROR              EncryptedUploadResponse_ErrorCode = 5
	EncryptedUploadResponse_INVALID_CRYPTO_PARAMETERS EncryptedUploadResponse_ErrorCode = 6
	EncryptedUploadResponse_TOO_MANY_KEYS             EncryptedUploadResponse_ErrorCode = 7
	// The timestamp in the Upload message must be no more than one hour old,
	// otherwise this error is generated.
	EncryptedUploadResponse_INVALID_TIMESTAMP                     EncryptedUploadResponse_ErrorCode = 8
	EncryptedUploadResponse_INVALID_ROLLING_PERIOD                EncryptedUploadResponse_ErrorCode = 10
	EncryptedUploadResponse_INVALID_KEY_DATA                      EncryptedUploadResponse_ErrorCode = 11
	EncryptedUploadResponse_INVALID_ROLLING_START_INTERVAL_NUMBER EncryptedUploadResponse_ErrorCode = 12
	EncryptedUploadResponse_INVALID_TRANSMISSION_RISK_LEVEL       EncryptedUploadResponse_ErrorCode = 13
	EncryptedUploadResponse_NO_KEYS_IN_PAYLOAD										EncryptedUploadResponse_ErrorCode = 14
)

// Enum value maps for EncryptedUploadResponse_ErrorCode.
var (
	EncryptedUploadResponse_ErrorCode_name = map[int32]string{
		0:  "NONE",
		1:  "UNKNOWN",
		2:  "INVALID_KEYPAIR",
		3:  "DECRYPTION_FAILED",
		4:  "INVALID_PAYLOAD",
		5:  "SERVER_ERROR",
		6:  "INVALID_CRYPTO_PARAMETERS",
		7:  "TOO_MANY_KEYS",
		8:  "INVALID_TIMESTAMP",
		10: "INVALID_ROLLING_PERIOD",
		11: "INVALID_KEY_DATA",
		12: "INVALID_ROLLING_START_INTERVAL_NUMBER",
		13: "INVALID_TRANSMISSION_RISK_LEVEL",
		14: "NO_KEYS_IN_PAYLOAD",
	}
	EncryptedUploadResponse_ErrorCode_value = map[string]int32{
		"NONE":                                  0,
		"UNKNOWN":                               1,
		"INVALID_KEYPAIR":                       2,
		"DECRYPTION_FAILED":                     3,
		"INVALID_PAYLOAD":                       4,
		"SERVER_ERROR":                          5,
		"INVALID_CRYPTO_PARAMETERS":             6,
		"TOO_MANY_KEYS":                         7,
		"INVALID_TIMESTAMP":                     8,
		"INVALID_ROLLING_PERIOD":                10,
		"INVALID_KEY_DATA":                      11,
		"INVALID_ROLLING_START_INTERVAL_NUMBER": 12,
		"INVALID_TRANSMISSION_RISK_LEVEL":       13,
		"NO_KEYS_IN_PAYLOAD":										 14,
	}
)

func (x EncryptedUploadResponse_ErrorCode) Enum() *EncryptedUploadResponse_ErrorCode {
	p := new(EncryptedUploadResponse_ErrorCode)
	*p = x
	return p
}

func (x EncryptedUploadResponse_ErrorCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (EncryptedUploadResponse_ErrorCode) Descriptor() protoreflect.EnumDescriptor {
	return file_proto_covidshield_proto_enumTypes[1].Descriptor()
}

func (EncryptedUploadResponse_ErrorCode) Type() protoreflect.EnumType {
	return &file_proto_covidshield_proto_enumTypes[1]
}

func (x EncryptedUploadResponse_ErrorCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Do not use.
func (x *EncryptedUploadResponse_ErrorCode) UnmarshalJSON(b []byte) error {
	num, err := protoimpl.X.UnmarshalJSONEnum(x.Descriptor(), b)
	if err != nil {
		return err
	}
	*x = EncryptedUploadResponse_ErrorCode(num)
	return nil
}

// Deprecated: Use EncryptedUploadResponse_ErrorCode.Descriptor instead.
func (EncryptedUploadResponse_ErrorCode) EnumDescriptor() ([]byte, []int) {
	return file_proto_covidshield_proto_rawDescGZIP(), []int{3, 0}
}

// Clients will receive a One Time Code via some external channel (i.e. SMS or
// verbal). Then, upon issuing THIS request, they will generate a new keypair.
// If the response comes back successful, the app_public_key (and the
// corresponding private key) and the returned server_public_key will be kept in
// local storage for the duration of this reporting window (the next 14 days).
//
// app_public_keys must not be re-used for new KeyClaimRequests, or the requests
// will fail.
type KeyClaimRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// one_time_code is the code received from the testing portal.
	OneTimeCode *string `protobuf:"bytes,1,req,name=one_time_code,json=oneTimeCode" json:"one_time_code,omitempty"` // 8 numerical digits
	// app_public_key is generated locally and saved upon successful request
	// completion.
	AppPublicKey []byte `protobuf:"bytes,2,req,name=app_public_key,json=appPublicKey" json:"app_public_key,omitempty"` // 32 bytes
}

func (x *KeyClaimRequest) Reset() {
	*x = KeyClaimRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_covidshield_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyClaimRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyClaimRequest) ProtoMessage() {}

func (x *KeyClaimRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_covidshield_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyClaimRequest.ProtoReflect.Descriptor instead.
func (*KeyClaimRequest) Descriptor() ([]byte, []int) {
	return file_proto_covidshield_proto_rawDescGZIP(), []int{0}
}

func (x *KeyClaimRequest) GetOneTimeCode() string {
	if x != nil && x.OneTimeCode != nil {
		return *x.OneTimeCode
	}
	return ""
}

func (x *KeyClaimRequest) GetAppPublicKey() []byte {
	if x != nil {
		return x.AppPublicKey
	}
	return nil
}

// KeyClaimResponse is received from the server in response to a
// KeyClaimRequest. If the request was successful, error will be NONE and
// server_public_key will be set.
type KeyClaimResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error                *KeyClaimResponse_ErrorCode `protobuf:"varint,1,opt,name=error,enum=covidshield.KeyClaimResponse_ErrorCode" json:"error,omitempty"`
	ServerPublicKey      []byte                      `protobuf:"bytes,2,opt,name=server_public_key,json=serverPublicKey" json:"server_public_key,omitempty"` // 32 bytes
	TriesRemaining       *uint32                     `protobuf:"varint,3,opt,name=tries_remaining,json=triesRemaining" json:"tries_remaining,omitempty"`
	RemainingBanDuration *duration.Duration          `protobuf:"bytes,4,opt,name=remaining_ban_duration,json=remainingBanDuration" json:"remaining_ban_duration,omitempty"`
}

func (x *KeyClaimResponse) Reset() {
	*x = KeyClaimResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_covidshield_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *KeyClaimResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*KeyClaimResponse) ProtoMessage() {}

func (x *KeyClaimResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_covidshield_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use KeyClaimResponse.ProtoReflect.Descriptor instead.
func (*KeyClaimResponse) Descriptor() ([]byte, []int) {
	return file_proto_covidshield_proto_rawDescGZIP(), []int{1}
}

func (x *KeyClaimResponse) GetError() KeyClaimResponse_ErrorCode {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return KeyClaimResponse_NONE
}

func (x *KeyClaimResponse) GetServerPublicKey() []byte {
	if x != nil {
		return x.ServerPublicKey
	}
	return nil
}

func (x *KeyClaimResponse) GetTriesRemaining() uint32 {
	if x != nil && x.TriesRemaining != nil {
		return *x.TriesRemaining
	}
	return 0
}

func (x *KeyClaimResponse) GetRemainingBanDuration() *duration.Duration {
	if x != nil {
		return x.RemainingBanDuration
	}
	return nil
}

// We are using a NaCl Box (Curve25519+XSalsa20+Poly1305) to encrypt and
// authorize messages.
//
// Note that we are not *explicitly* signing the payload: NaCl Box provides
// non-repudiability for the receiving party.  The receiving party (and only
// the receiving party) could forge the sender's signature on this message, but
// we there's no need or possibility for third-party verification in this
// scheme.
//
// See "Security Model" at https://nacl.cr.yp.to/box.html
type EncryptedUploadRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// server_public_key is provided by the Diagnosis Server to the App, and is
	// used to encrypt the payload. This key should be stored locally for 14
	// days, and used to submit the follow-up Diagnosis Key.
	ServerPublicKey []byte `protobuf:"bytes,1,req,name=server_public_key,json=serverPublicKey" json:"server_public_key,omitempty"` // 32 bytes
	// app_public_key is the public side of a keypair generated once by the
	// application and linked to the server_public_key. These are linked in the
	// Diagnosis Server, so that only one app_public_key is authorized to upload
	// for a given server_public_key. If a new server_public_key is issued to an App
	// (e.g. months later), a new app_public_key should be generated.
	AppPublicKey []byte `protobuf:"bytes,2,req,name=app_public_key,json=appPublicKey" json:"app_public_key,omitempty"` // 32 bytes
	// nonce must be 24 random bytes, and absolutely must NOT be re-used between
	// subsequent submissions of Diagnosis Keys. This nonce is passed to the
	// encryption library to generate the ciphertext.
	Nonce []byte `protobuf:"bytes,3,req,name=nonce" json:"nonce,omitempty"` // 24 bytes
	// payload is the result of encoding/marshalling, and then encrypting, an
	// `Upload` message. It is done this way rather than as an embedded message
	// field, because we need to encrypt a byte stream, not an object.
	Payload []byte `protobuf:"bytes,4,req,name=payload" json:"payload,omitempty"` // variable length
}

func (x *EncryptedUploadRequest) Reset() {
	*x = EncryptedUploadRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_covidshield_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedUploadRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedUploadRequest) ProtoMessage() {}

func (x *EncryptedUploadRequest) ProtoReflect() protoreflect.Message {
	mi := &file_proto_covidshield_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedUploadRequest.ProtoReflect.Descriptor instead.
func (*EncryptedUploadRequest) Descriptor() ([]byte, []int) {
	return file_proto_covidshield_proto_rawDescGZIP(), []int{2}
}

func (x *EncryptedUploadRequest) GetServerPublicKey() []byte {
	if x != nil {
		return x.ServerPublicKey
	}
	return nil
}

func (x *EncryptedUploadRequest) GetAppPublicKey() []byte {
	if x != nil {
		return x.AppPublicKey
	}
	return nil
}

func (x *EncryptedUploadRequest) GetNonce() []byte {
	if x != nil {
		return x.Nonce
	}
	return nil
}

func (x *EncryptedUploadRequest) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

// EncryptedUploadResponse is received from the server in response to a
// EncryptedUploadRequest. If the request was successful, error will be NONE.
type EncryptedUploadResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Error *EncryptedUploadResponse_ErrorCode `protobuf:"varint,1,req,name=error,enum=covidshield.EncryptedUploadResponse_ErrorCode" json:"error,omitempty"`
}

func (x *EncryptedUploadResponse) Reset() {
	*x = EncryptedUploadResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_covidshield_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EncryptedUploadResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EncryptedUploadResponse) ProtoMessage() {}

func (x *EncryptedUploadResponse) ProtoReflect() protoreflect.Message {
	mi := &file_proto_covidshield_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EncryptedUploadResponse.ProtoReflect.Descriptor instead.
func (*EncryptedUploadResponse) Descriptor() ([]byte, []int) {
	return file_proto_covidshield_proto_rawDescGZIP(), []int{3}
}

func (x *EncryptedUploadResponse) GetError() EncryptedUploadResponse_ErrorCode {
	if x != nil && x.Error != nil {
		return *x.Error
	}
	return EncryptedUploadResponse_NONE
}

// Upload is the decrypted type of the `payload` field in EncryptedUploadRequest.
type Upload struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// timestamp is just the current device time at message generation.
	Timestamp *timestamp.Timestamp `protobuf:"bytes,1,req,name=timestamp" json:"timestamp,omitempty"`
	// keys returns from the ExposureNotification API.
	Keys []*TemporaryExposureKey `protobuf:"bytes,2,rep,name=keys" json:"keys,omitempty"`
}

func (x *Upload) Reset() {
	*x = Upload{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_covidshield_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Upload) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Upload) ProtoMessage() {}

func (x *Upload) ProtoReflect() protoreflect.Message {
	mi := &file_proto_covidshield_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Upload.ProtoReflect.Descriptor instead.
func (*Upload) Descriptor() ([]byte, []int) {
	return file_proto_covidshield_proto_rawDescGZIP(), []int{4}
}

func (x *Upload) GetTimestamp() *timestamp.Timestamp {
	if x != nil {
		return x.Timestamp
	}
	return nil
}

func (x *Upload) GetKeys() []*TemporaryExposureKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

type TemporaryExposureKeyExport struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Time window of keys in the file, based on arrival
	// at the server, in UTC seconds.
	StartTimestamp *uint64 `protobuf:"fixed64,1,opt,name=start_timestamp,json=startTimestamp" json:"start_timestamp,omitempty"`
	EndTimestamp   *uint64 `protobuf:"fixed64,2,opt,name=end_timestamp,json=endTimestamp" json:"end_timestamp,omitempty"`
	// Region from which these keys came (for example, MCC).
	Region *string `protobuf:"bytes,3,opt,name=region" json:"region,omitempty"`
	// Reserved for future use. Both batch_num and batch_size
	// must be set to a value of 1.
	BatchNum  *int32 `protobuf:"varint,4,opt,name=batch_num,json=batchNum" json:"batch_num,omitempty"`
	BatchSize *int32 `protobuf:"varint,5,opt,name=batch_size,json=batchSize" json:"batch_size,omitempty"`
	// Information about associated signatures.
	SignatureInfos []*SignatureInfo `protobuf:"bytes,6,rep,name=signature_infos,json=signatureInfos" json:"signature_infos,omitempty"`
	// The temporary exposure keys themselves.
	Keys []*TemporaryExposureKey `protobuf:"bytes,7,rep,name=keys" json:"keys,omitempty"`
}

func (x *TemporaryExposureKeyExport) Reset() {
	*x = TemporaryExposureKeyExport{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_covidshield_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemporaryExposureKeyExport) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporaryExposureKeyExport) ProtoMessage() {}

func (x *TemporaryExposureKeyExport) ProtoReflect() protoreflect.Message {
	mi := &file_proto_covidshield_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporaryExposureKeyExport.ProtoReflect.Descriptor instead.
func (*TemporaryExposureKeyExport) Descriptor() ([]byte, []int) {
	return file_proto_covidshield_proto_rawDescGZIP(), []int{5}
}

func (x *TemporaryExposureKeyExport) GetStartTimestamp() uint64 {
	if x != nil && x.StartTimestamp != nil {
		return *x.StartTimestamp
	}
	return 0
}

func (x *TemporaryExposureKeyExport) GetEndTimestamp() uint64 {
	if x != nil && x.EndTimestamp != nil {
		return *x.EndTimestamp
	}
	return 0
}

func (x *TemporaryExposureKeyExport) GetRegion() string {
	if x != nil && x.Region != nil {
		return *x.Region
	}
	return ""
}

func (x *TemporaryExposureKeyExport) GetBatchNum() int32 {
	if x != nil && x.BatchNum != nil {
		return *x.BatchNum
	}
	return 0
}

func (x *TemporaryExposureKeyExport) GetBatchSize() int32 {
	if x != nil && x.BatchSize != nil {
		return *x.BatchSize
	}
	return 0
}

func (x *TemporaryExposureKeyExport) GetSignatureInfos() []*SignatureInfo {
	if x != nil {
		return x.SignatureInfos
	}
	return nil
}

func (x *TemporaryExposureKeyExport) GetKeys() []*TemporaryExposureKey {
	if x != nil {
		return x.Keys
	}
	return nil
}

type SignatureInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// App Store app bundle ID.
	AppBundleId *string `protobuf:"bytes,1,opt,name=app_bundle_id,json=appBundleId" json:"app_bundle_id,omitempty"`
	// Android app package name.
	AndroidPackage *string `protobuf:"bytes,2,opt,name=android_package,json=androidPackage" json:"android_package,omitempty"`
	// Key version in case the EN server signing key is rotated.
	VerificationKeyVersion *string `protobuf:"bytes,3,opt,name=verification_key_version,json=verificationKeyVersion" json:"verification_key_version,omitempty"`
	// Additional information to uniquely identify the public
	// key associated with the EN server's signing key
	// (for example, the EN server might serve the app
	// from different countries with different keys).
	VerificationKeyId *string `protobuf:"bytes,4,opt,name=verification_key_id,json=verificationKeyId" json:"verification_key_id,omitempty"`
	// All keys must be signed using the SHA-256 with ECDSA algorithm.
	// This field must contain the string "ecdsa-with-SHA256".
	SignatureAlgorithm *string `protobuf:"bytes,5,opt,name=signature_algorithm,json=signatureAlgorithm" json:"signature_algorithm,omitempty"`
}

func (x *SignatureInfo) Reset() {
	*x = SignatureInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_covidshield_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SignatureInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SignatureInfo) ProtoMessage() {}

func (x *SignatureInfo) ProtoReflect() protoreflect.Message {
	mi := &file_proto_covidshield_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SignatureInfo.ProtoReflect.Descriptor instead.
func (*SignatureInfo) Descriptor() ([]byte, []int) {
	return file_proto_covidshield_proto_rawDescGZIP(), []int{6}
}

func (x *SignatureInfo) GetAppBundleId() string {
	if x != nil && x.AppBundleId != nil {
		return *x.AppBundleId
	}
	return ""
}

func (x *SignatureInfo) GetAndroidPackage() string {
	if x != nil && x.AndroidPackage != nil {
		return *x.AndroidPackage
	}
	return ""
}

func (x *SignatureInfo) GetVerificationKeyVersion() string {
	if x != nil && x.VerificationKeyVersion != nil {
		return *x.VerificationKeyVersion
	}
	return ""
}

func (x *SignatureInfo) GetVerificationKeyId() string {
	if x != nil && x.VerificationKeyId != nil {
		return *x.VerificationKeyId
	}
	return ""
}

func (x *SignatureInfo) GetSignatureAlgorithm() string {
	if x != nil && x.SignatureAlgorithm != nil {
		return *x.SignatureAlgorithm
	}
	return ""
}

type TemporaryExposureKey struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Temporary exposure key.
	KeyData []byte `protobuf:"bytes,1,opt,name=key_data,json=keyData" json:"key_data,omitempty"`
	// Varying risk associated with a key depending on the diagnosis method.
	TransmissionRiskLevel *int32 `protobuf:"varint,2,opt,name=transmission_risk_level,json=transmissionRiskLevel" json:"transmission_risk_level,omitempty"`
	// Number representing the beginning interval for temporary exposure
	// key validity (ENIntervalNumber).
	RollingStartIntervalNumber *int32 `protobuf:"varint,3,opt,name=rolling_start_interval_number,json=rollingStartIntervalNumber" json:"rolling_start_interval_number,omitempty"`
	// Number of intervals in a period.
	RollingPeriod *int32 `protobuf:"varint,4,opt,name=rolling_period,json=rollingPeriod,def=144" json:"rolling_period,omitempty"`
}

// Default values for TemporaryExposureKey fields.
const (
	Default_TemporaryExposureKey_RollingPeriod = int32(144)
)

func (x *TemporaryExposureKey) Reset() {
	*x = TemporaryExposureKey{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_covidshield_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TemporaryExposureKey) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TemporaryExposureKey) ProtoMessage() {}

func (x *TemporaryExposureKey) ProtoReflect() protoreflect.Message {
	mi := &file_proto_covidshield_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TemporaryExposureKey.ProtoReflect.Descriptor instead.
func (*TemporaryExposureKey) Descriptor() ([]byte, []int) {
	return file_proto_covidshield_proto_rawDescGZIP(), []int{7}
}

func (x *TemporaryExposureKey) GetKeyData() []byte {
	if x != nil {
		return x.KeyData
	}
	return nil
}

func (x *TemporaryExposureKey) GetTransmissionRiskLevel() int32 {
	if x != nil && x.TransmissionRiskLevel != nil {
		return *x.TransmissionRiskLevel
	}
	return 0
}

func (x *TemporaryExposureKey) GetRollingStartIntervalNumber() int32 {
	if x != nil && x.RollingStartIntervalNumber != nil {
		return *x.RollingStartIntervalNumber
	}
	return 0
}

func (x *TemporaryExposureKey) GetRollingPeriod() int32 {
	if x != nil && x.RollingPeriod != nil {
		return *x.RollingPeriod
	}
	return Default_TemporaryExposureKey_RollingPeriod
}

type TEKSignatureList struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information about associated signatures.
	Signatures []*TEKSignature `protobuf:"bytes,1,rep,name=signatures" json:"signatures,omitempty"`
}

func (x *TEKSignatureList) Reset() {
	*x = TEKSignatureList{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_covidshield_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TEKSignatureList) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TEKSignatureList) ProtoMessage() {}

func (x *TEKSignatureList) ProtoReflect() protoreflect.Message {
	mi := &file_proto_covidshield_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TEKSignatureList.ProtoReflect.Descriptor instead.
func (*TEKSignatureList) Descriptor() ([]byte, []int) {
	return file_proto_covidshield_proto_rawDescGZIP(), []int{8}
}

func (x *TEKSignatureList) GetSignatures() []*TEKSignature {
	if x != nil {
		return x.Signatures
	}
	return nil
}

type TEKSignature struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	// Information to uniquely identify the public key associated
	// with the EN server's signing key.
	SignatureInfo *SignatureInfo `protobuf:"bytes,1,opt,name=signature_info,json=signatureInfo" json:"signature_info,omitempty"`
	// Reserved for future use. Both batch_num and batch_size
	// must be set to a value of 1.
	BatchNum  *int32 `protobuf:"varint,2,opt,name=batch_num,json=batchNum" json:"batch_num,omitempty"`
	BatchSize *int32 `protobuf:"varint,3,opt,name=batch_size,json=batchSize" json:"batch_size,omitempty"`
	// Signature in X9.62 format (ASN.1 SEQUENCE of two INTEGER fields).
	Signature []byte `protobuf:"bytes,4,opt,name=signature" json:"signature,omitempty"`
}

func (x *TEKSignature) Reset() {
	*x = TEKSignature{}
	if protoimpl.UnsafeEnabled {
		mi := &file_proto_covidshield_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TEKSignature) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TEKSignature) ProtoMessage() {}

func (x *TEKSignature) ProtoReflect() protoreflect.Message {
	mi := &file_proto_covidshield_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TEKSignature.ProtoReflect.Descriptor instead.
func (*TEKSignature) Descriptor() ([]byte, []int) {
	return file_proto_covidshield_proto_rawDescGZIP(), []int{9}
}

func (x *TEKSignature) GetSignatureInfo() *SignatureInfo {
	if x != nil {
		return x.SignatureInfo
	}
	return nil
}

func (x *TEKSignature) GetBatchNum() int32 {
	if x != nil && x.BatchNum != nil {
		return *x.BatchNum
	}
	return 0
}

func (x *TEKSignature) GetBatchSize() int32 {
	if x != nil && x.BatchSize != nil {
		return *x.BatchSize
	}
	return 0
}

func (x *TEKSignature) GetSignature() []byte {
	if x != nil {
		return x.Signature
	}
	return nil
}

var File_proto_covidshield_proto protoreflect.FileDescriptor

var file_proto_covidshield_proto_rawDesc = []byte{
	0x0a, 0x17, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x73, 0x68, 0x69,
	0x65, 0x6c, 0x64, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x0b, 0x63, 0x6f, 0x76, 0x69, 0x64,
	0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x1a, 0x1f, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x64, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x5b, 0x0a, 0x0f, 0x4b, 0x65, 0x79, 0x43, 0x6c,
	0x61, 0x69, 0x6d, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x6e,
	0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x02, 0x28,
	0x09, 0x52, 0x0b, 0x6f, 0x6e, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24,
	0x0a, 0x0e, 0x61, 0x70, 0x70, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79,
	0x18, 0x02, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x22, 0xec, 0x02, 0x0a, 0x10, 0x4b, 0x65, 0x79, 0x43, 0x6c, 0x61, 0x69,
	0x6d, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3d, 0x0a, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x64,
	0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x4b, 0x65, 0x79, 0x43, 0x6c, 0x61, 0x69, 0x6d, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64,
	0x65, 0x52, 0x05, 0x65, 0x72, 0x72, 0x6f, 0x72, 0x12, 0x2a, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x50, 0x75, 0x62, 0x6c, 0x69,
	0x63, 0x4b, 0x65, 0x79, 0x12, 0x27, 0x0a, 0x0f, 0x74, 0x72, 0x69, 0x65, 0x73, 0x5f, 0x72, 0x65,
	0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x74,
	0x72, 0x69, 0x65, 0x73, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x12, 0x4f, 0x0a,
	0x16, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x69, 0x6e, 0x67, 0x5f, 0x62, 0x61, 0x6e, 0x5f, 0x64,
	0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x19, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x14, 0x72, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x69, 0x6e, 0x67, 0x42, 0x61, 0x6e, 0x44, 0x75, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x73,
	0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x08, 0x0a, 0x04, 0x4e,
	0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e,
	0x10, 0x01, 0x12, 0x19, 0x0a, 0x15, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4f, 0x4e,
	0x45, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x5f, 0x43, 0x4f, 0x44, 0x45, 0x10, 0x02, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x03, 0x12,
	0x0f, 0x0a, 0x0b, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x10, 0x04,
	0x12, 0x11, 0x0a, 0x0d, 0x54, 0x45, 0x4d, 0x50, 0x4f, 0x52, 0x41, 0x52, 0x59, 0x5f, 0x42, 0x41,
	0x4e, 0x10, 0x05, 0x22, 0x9a, 0x01, 0x0a, 0x16, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x2a,
	0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f,
	0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79, 0x12, 0x24, 0x0a, 0x0e, 0x61, 0x70,
	0x70, 0x5f, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x5f, 0x6b, 0x65, 0x79, 0x18, 0x02, 0x20, 0x02,
	0x28, 0x0c, 0x52, 0x0c, 0x61, 0x70, 0x70, 0x50, 0x75, 0x62, 0x6c, 0x69, 0x63, 0x4b, 0x65, 0x79,
	0x12, 0x14, 0x0a, 0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x18, 0x03, 0x20, 0x02, 0x28, 0x0c, 0x52,
	0x05, 0x6e, 0x6f, 0x6e, 0x63, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61,
	0x64, 0x18, 0x04, 0x20, 0x02, 0x28, 0x0c, 0x52, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x22, 0xa2, 0x03, 0x0a, 0x17, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x55, 0x70,
	0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x44, 0x0a, 0x05,
	0x65, 0x72, 0x72, 0x6f, 0x72, 0x18, 0x01, 0x20, 0x02, 0x28, 0x0e, 0x32, 0x2e, 0x2e, 0x63, 0x6f,
	0x76, 0x69, 0x64, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x45, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x65, 0x64, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x2e, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x05, 0x65, 0x72, 0x72,
	0x6f, 0x72, 0x22, 0xc0, 0x02, 0x0a, 0x09, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x08, 0x0a, 0x04, 0x4e, 0x4f, 0x4e, 0x45, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x55, 0x4e,
	0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c,
	0x49, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x50, 0x41, 0x49, 0x52, 0x10, 0x02, 0x12, 0x15, 0x0a, 0x11,
	0x44, 0x45, 0x43, 0x52, 0x59, 0x50, 0x54, 0x49, 0x4f, 0x4e, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x45,
	0x44, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x50,
	0x41, 0x59, 0x4c, 0x4f, 0x41, 0x44, 0x10, 0x04, 0x12, 0x10, 0x0a, 0x0c, 0x53, 0x45, 0x52, 0x56,
	0x45, 0x52, 0x5f, 0x45, 0x52, 0x52, 0x4f, 0x52, 0x10, 0x05, 0x12, 0x1d, 0x0a, 0x19, 0x49, 0x4e,
	0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x43, 0x52, 0x59, 0x50, 0x54, 0x4f, 0x5f, 0x50, 0x41, 0x52,
	0x41, 0x4d, 0x45, 0x54, 0x45, 0x52, 0x53, 0x10, 0x06, 0x12, 0x11, 0x0a, 0x0d, 0x54, 0x4f, 0x4f,
	0x5f, 0x4d, 0x41, 0x4e, 0x59, 0x5f, 0x4b, 0x45, 0x59, 0x53, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11,
	0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x49, 0x4d, 0x45, 0x53, 0x54, 0x41, 0x4d,
	0x50, 0x10, 0x08, 0x12, 0x1a, 0x0a, 0x16, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x52,
	0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x49, 0x4f, 0x44, 0x10, 0x0a, 0x12,
	0x14, 0x0a, 0x10, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x4b, 0x45, 0x59, 0x5f, 0x44,
	0x41, 0x54, 0x41, 0x10, 0x0b, 0x12, 0x29, 0x0a, 0x25, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44,
	0x5f, 0x52, 0x4f, 0x4c, 0x4c, 0x49, 0x4e, 0x47, 0x5f, 0x53, 0x54, 0x41, 0x52, 0x54, 0x5f, 0x49,
	0x4e, 0x54, 0x45, 0x52, 0x56, 0x41, 0x4c, 0x5f, 0x4e, 0x55, 0x4d, 0x42, 0x45, 0x52, 0x10, 0x0c,
	0x12, 0x23, 0x0a, 0x1f, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x5f, 0x54, 0x52, 0x41, 0x4e,
	0x53, 0x4d, 0x49, 0x53, 0x53, 0x49, 0x4f, 0x4e, 0x5f, 0x52, 0x49, 0x53, 0x4b, 0x5f, 0x4c, 0x45,
	0x56, 0x45, 0x4c, 0x10, 0x0d, 0x22, 0x79, 0x0a, 0x06, 0x55, 0x70, 0x6c, 0x6f, 0x61, 0x64, 0x12,
	0x38, 0x0a, 0x09, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x01, 0x20, 0x02,
	0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x52, 0x09,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x35, 0x0a, 0x04, 0x6b, 0x65, 0x79,
	0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x73,
	0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x45,
	0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73,
	0x22, 0xba, 0x02, 0x0a, 0x1a, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x45, 0x78,
	0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x72, 0x74, 0x12,
	0x27, 0x0a, 0x0f, 0x73, 0x74, 0x61, 0x72, 0x74, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x06, 0x52, 0x0e, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x23, 0x0a, 0x0d, 0x65, 0x6e, 0x64, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x06, 0x52,
	0x0c, 0x65, 0x6e, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a,
	0x06, 0x72, 0x65, 0x67, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x72,
	0x65, 0x67, 0x69, 0x6f, 0x6e, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e,
	0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x43, 0x0a, 0x0f, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f, 0x69,
	0x6e, 0x66, 0x6f, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x76,
	0x69, 0x64, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x73, 0x12, 0x35, 0x0a, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x63, 0x6f, 0x76, 0x69, 0x64, 0x73, 0x68, 0x69, 0x65,
	0x6c, 0x64, 0x2e, 0x54, 0x65, 0x6d, 0x70, 0x6f, 0x72, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x6f,
	0x73, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79, 0x52, 0x04, 0x6b, 0x65, 0x79, 0x73, 0x22, 0xf7, 0x01,
	0x0a, 0x0d, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12,
	0x22, 0x0a, 0x0d, 0x61, 0x70, 0x70, 0x5f, 0x62, 0x75, 0x6e, 0x64, 0x6c, 0x65, 0x5f, 0x69, 0x64,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x61, 0x70, 0x70, 0x42, 0x75, 0x6e, 0x64, 0x6c,
	0x65, 0x49, 0x64, 0x12, 0x27, 0x0a, 0x0f, 0x61, 0x6e, 0x64, 0x72, 0x6f, 0x69, 0x64, 0x5f, 0x70,
	0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x61, 0x6e,
	0x64, 0x72, 0x6f, 0x69, 0x64, 0x50, 0x61, 0x63, 0x6b, 0x61, 0x67, 0x65, 0x12, 0x38, 0x0a, 0x18,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79,
	0x5f, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4b, 0x65, 0x79, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x13, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x5f, 0x6b, 0x65, 0x79, 0x5f, 0x69, 0x64, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x76, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x12, 0x2f, 0x0a, 0x13, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x12, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x41, 0x6c,
	0x67, 0x6f, 0x72, 0x69, 0x74, 0x68, 0x6d, 0x22, 0xd8, 0x01, 0x0a, 0x14, 0x54, 0x65, 0x6d, 0x70,
	0x6f, 0x72, 0x61, 0x72, 0x79, 0x45, 0x78, 0x70, 0x6f, 0x73, 0x75, 0x72, 0x65, 0x4b, 0x65, 0x79,
	0x12, 0x19, 0x0a, 0x08, 0x6b, 0x65, 0x79, 0x5f, 0x64, 0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0c, 0x52, 0x07, 0x6b, 0x65, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12, 0x36, 0x0a, 0x17, 0x74,
	0x72, 0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x5f, 0x72, 0x69, 0x73, 0x6b,
	0x5f, 0x6c, 0x65, 0x76, 0x65, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x74, 0x72,
	0x61, 0x6e, 0x73, 0x6d, 0x69, 0x73, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x69, 0x73, 0x6b, 0x4c, 0x65,
	0x76, 0x65, 0x6c, 0x12, 0x41, 0x0a, 0x1d, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x5f, 0x73,
	0x74, 0x61, 0x72, 0x74, 0x5f, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x5f, 0x6e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x1a, 0x72, 0x6f, 0x6c, 0x6c,
	0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x72, 0x74, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x12, 0x2a, 0x0a, 0x0e, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e,
	0x67, 0x5f, 0x70, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x3a, 0x03,
	0x31, 0x34, 0x34, 0x52, 0x0d, 0x72, 0x6f, 0x6c, 0x6c, 0x69, 0x6e, 0x67, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x22, 0x4d, 0x0a, 0x10, 0x54, 0x45, 0x4b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74,
	0x75, 0x72, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x19, 0x2e, 0x63, 0x6f, 0x76,
	0x69, 0x64, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x54, 0x45, 0x4b, 0x53, 0x69, 0x67, 0x6e,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x52, 0x0a, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65,
	0x73, 0x22, 0xab, 0x01, 0x0a, 0x0c, 0x54, 0x45, 0x4b, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x12, 0x41, 0x0a, 0x0e, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x5f,
	0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x63, 0x6f, 0x76,
	0x69, 0x64, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64, 0x2e, 0x53, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75,
	0x72, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1b, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x6e,
	0x75, 0x6d, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x62, 0x61, 0x74, 0x63, 0x68, 0x4e,
	0x75, 0x6d, 0x12, 0x1d, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x73, 0x69, 0x7a, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x62, 0x61, 0x74, 0x63, 0x68, 0x53, 0x69, 0x7a,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0c, 0x52, 0x09, 0x73, 0x69, 0x67, 0x6e, 0x61, 0x74, 0x75, 0x72, 0x65, 0x42,
	0x17, 0x5a, 0x15, 0x70, 0x6b, 0x67, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2f, 0x63, 0x6f, 0x76,
	0x69, 0x64, 0x73, 0x68, 0x69, 0x65, 0x6c, 0x64,
}

var (
	file_proto_covidshield_proto_rawDescOnce sync.Once
	file_proto_covidshield_proto_rawDescData = file_proto_covidshield_proto_rawDesc
)

func file_proto_covidshield_proto_rawDescGZIP() []byte {
	file_proto_covidshield_proto_rawDescOnce.Do(func() {
		file_proto_covidshield_proto_rawDescData = protoimpl.X.CompressGZIP(file_proto_covidshield_proto_rawDescData)
	})
	return file_proto_covidshield_proto_rawDescData
}

var file_proto_covidshield_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_proto_covidshield_proto_msgTypes = make([]protoimpl.MessageInfo, 10)
var file_proto_covidshield_proto_goTypes = []interface{}{
	(KeyClaimResponse_ErrorCode)(0),        // 0: covidshield.KeyClaimResponse.ErrorCode
	(EncryptedUploadResponse_ErrorCode)(0), // 1: covidshield.EncryptedUploadResponse.ErrorCode
	(*KeyClaimRequest)(nil),                // 2: covidshield.KeyClaimRequest
	(*KeyClaimResponse)(nil),               // 3: covidshield.KeyClaimResponse
	(*EncryptedUploadRequest)(nil),         // 4: covidshield.EncryptedUploadRequest
	(*EncryptedUploadResponse)(nil),        // 5: covidshield.EncryptedUploadResponse
	(*Upload)(nil),                         // 6: covidshield.Upload
	(*TemporaryExposureKeyExport)(nil),     // 7: covidshield.TemporaryExposureKeyExport
	(*SignatureInfo)(nil),                  // 8: covidshield.SignatureInfo
	(*TemporaryExposureKey)(nil),           // 9: covidshield.TemporaryExposureKey
	(*TEKSignatureList)(nil),               // 10: covidshield.TEKSignatureList
	(*TEKSignature)(nil),                   // 11: covidshield.TEKSignature
	(*duration.Duration)(nil),              // 12: google.protobuf.Duration
	(*timestamp.Timestamp)(nil),            // 13: google.protobuf.Timestamp
}
var file_proto_covidshield_proto_depIdxs = []int32{
	0,  // 0: covidshield.KeyClaimResponse.error:type_name -> covidshield.KeyClaimResponse.ErrorCode
	12, // 1: covidshield.KeyClaimResponse.remaining_ban_duration:type_name -> google.protobuf.Duration
	1,  // 2: covidshield.EncryptedUploadResponse.error:type_name -> covidshield.EncryptedUploadResponse.ErrorCode
	13, // 3: covidshield.Upload.timestamp:type_name -> google.protobuf.Timestamp
	9,  // 4: covidshield.Upload.keys:type_name -> covidshield.TemporaryExposureKey
	8,  // 5: covidshield.TemporaryExposureKeyExport.signature_infos:type_name -> covidshield.SignatureInfo
	9,  // 6: covidshield.TemporaryExposureKeyExport.keys:type_name -> covidshield.TemporaryExposureKey
	11, // 7: covidshield.TEKSignatureList.signatures:type_name -> covidshield.TEKSignature
	8,  // 8: covidshield.TEKSignature.signature_info:type_name -> covidshield.SignatureInfo
	9,  // [9:9] is the sub-list for method output_type
	9,  // [9:9] is the sub-list for method input_type
	9,  // [9:9] is the sub-list for extension type_name
	9,  // [9:9] is the sub-list for extension extendee
	0,  // [0:9] is the sub-list for field type_name
}

func init() { file_proto_covidshield_proto_init() }
func file_proto_covidshield_proto_init() {
	if File_proto_covidshield_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_proto_covidshield_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyClaimRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_covidshield_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*KeyClaimResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_covidshield_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedUploadRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_covidshield_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EncryptedUploadResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_covidshield_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Upload); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_covidshield_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemporaryExposureKeyExport); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_covidshield_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SignatureInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_covidshield_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TemporaryExposureKey); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_covidshield_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TEKSignatureList); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_proto_covidshield_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TEKSignature); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_proto_covidshield_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   10,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_proto_covidshield_proto_goTypes,
		DependencyIndexes: file_proto_covidshield_proto_depIdxs,
		EnumInfos:         file_proto_covidshield_proto_enumTypes,
		MessageInfos:      file_proto_covidshield_proto_msgTypes,
	}.Build()
	File_proto_covidshield_proto = out.File
	file_proto_covidshield_proto_rawDesc = nil
	file_proto_covidshield_proto_goTypes = nil
	file_proto_covidshield_proto_depIdxs = nil
}
